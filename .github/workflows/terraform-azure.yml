name: terraform-azure

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - '**/*.tf'
      - '.github/workflows/terraform-azure.yml'

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure CLI login (service principal)
        run: |
          az login --service-principal \
            -u "$ARM_CLIENT_ID" -p "$ARM_CLIENT_SECRET" \
            --tenant "$ARM_TENANT_ID" >/dev/null
          az account set --subscription "$ARM_SUBSCRIPTION_ID"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init -input=false -upgrade

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -out tfplan -input=false

      - name: Terraform Apply (on workflow_dispatch or main)
        if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve tfplan

      - name: Read TF outputs (RG & AKS)
        id: tfout
        run: |
          echo "rg=$(terraform output -raw rg_name)" >> $GITHUB_OUTPUT
          echo "aks=$(terraform output -raw aks_name)" >> $GITHUB_OUTPUT

      # ---  install kubectl ---
      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: latest

      # ---  get kubecontext for the AKS cluster ---
      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group "${{ steps.tfout.outputs.rg }}" \
            --name "${{ steps.tfout.outputs.aks }}" \
            --admin \
            --overwrite-existing

      # (optional) wait until nodes are ready to avoid flakiness
      - name: Wait for nodes
        run: |
          for i in {1..30}; do
            kubectl get nodes && break
            echo "Waiting for AKS nodes to be ready..."; sleep 10
          done

      # ---  apply manifest ---
      - name: kubectl apply
        run: kubectl apply -f deployment.yml
